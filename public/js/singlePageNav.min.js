(function () {
	'use strict';
	function extend(obj, src) {
		for (var key in src) if (src.hasOwnProperty(key)) obj[key] = src[key];
		return obj;
	}
	function getOffsetTop(elem) {
		var offsetTop = 0;
		while (elem) {
			offsetTop += elem.offsetTop;
			elem = elem.offsetParent;
		}
		return offsetTop;
	}
	function animateScrollTo(to, duration, callback) {
		var start = window.pageYOffset,
			change = to - start,
			currentTime = 0,
			increment = 16;
		function animate() {
			currentTime += increment;
			var val = easeInOutQuad(currentTime, start, change, duration);
			window.scrollTo(0, val);
			if (currentTime < duration) {
				requestAnimationFrame(animate);
			} else {
				if (callback) callback();
			}
		}
		animate();
	}
	function easeInOutQuad(t, b, c, d) {
		t /= d / 2;
		if (t < 1) return (c / 2) * t * t + b;
		t--;
		return (-c / 2) * (t * (t - 2) - 1) + b;
	}
	function SinglePageNav(container, options) {
		this.options = extend({
			offset: 0,
			threshold: 120,
			speed: 400,
			currentClass: 'current',
			updateHash: false,
			filter: '',
			onComplete: null,
			beforeStart: null
		}, options || {});
		this.container = container;
		this.links = Array.prototype.slice.call(
			this.options.filter
				? container.querySelectorAll('a' + this.options.filter)
				: container.querySelectorAll('a')
		);
		this.didScroll = false;
		this.timer = null;
		this.handleClick = this.handleClick.bind(this);
		this.checkPosition = this.checkPosition.bind(this);
		this.setTimer();
		this.links.forEach(function (link) {
			link.addEventListener('click', this.handleClick);
		}, this);
		this.checkPosition();
	}
	SinglePageNav.prototype.handleClick = function (e) {
		var link = e.currentTarget;
		var hash = link.hash;
		var target = document.getElementById(hash.slice(1));
		if (!target) return;
		e.preventDefault();
		this.clearTimer();
		if (typeof this.options.beforeStart === 'function') this.options.beforeStart();
		this.setActiveLink(hash);
		var scrollTo = getOffsetTop(target) - this.options.offset;
		animateScrollTo(scrollTo, this.options.speed, () => {
			if (this.options.updateHash && history.pushState) {
				history.pushState(null, null, hash);
			}
			this.setTimer();
			if (typeof this.options.onComplete === 'function') this.options.onComplete();
		});
	};
	SinglePageNav.prototype.setTimer = function () {
		window.addEventListener('scroll', this.onScroll.bind(this));
		this.timer = setInterval(() => {
			if (this.didScroll) {
				this.didScroll = false;
				this.checkPosition();
			}
		}, 250);
	};
	SinglePageNav.prototype.clearTimer = function () {
		clearInterval(this.timer);
		window.removeEventListener('scroll', this.onScroll);
		this.didScroll = false;
	};
	SinglePageNav.prototype.onScroll = function () {
		this.didScroll = true;
	};
	SinglePageNav.prototype.checkPosition = function () {
		var scrollPos = window.pageYOffset;
		var current = this.getCurrentSection(scrollPos);
		if (current) this.setActiveLink(current);
	};
	SinglePageNav.prototype.setActiveLink = function (hash) {
		this.links.forEach(link => {
			if (link.hash === hash) {
				link.classList.add(this.options.currentClass);
			} else {
				link.classList.remove(this.options.currentClass);
			}
		});
	};
	SinglePageNav.prototype.getCurrentSection = function (scrollPos) {
		var found = null;
		for (var i = 0; i < this.links.length; i++) {
			var hash = this.links[i].hash;
			var target = document.getElementById(hash.slice(1));
			if (target) {
				var top = getOffsetTop(target) - this.options.offset;
				if (scrollPos >= top - this.options.threshold) {
					found = hash;
				}
			}
		}
		// If at the bottom, select last
		if ((window.innerHeight + scrollPos) >= document.body.offsetHeight) {
			if (this.links.length) found = this.links[this.links.length - 1].hash;
		}
		return found || (this.links.length ? this.links[0].hash : null);
	};
	// Usage: new SinglePageNav(document.querySelector('.nav'), { ...options })
	window.SinglePageNav = SinglePageNav;
})();